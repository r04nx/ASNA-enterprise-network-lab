---
- name: Generate Network Traffic Across Enterprise Topology
  hosts: all
  gather_facts: no
  vars:
    traffic_duration: 60  # Duration in seconds for each traffic test
    ping_count: 10
    
  tasks:
    - name: Install required packages on Alpine hosts
      raw: |
        if command -v apk >/dev/null 2>&1; then
          apk add --no-cache curl wget iperf3 netcat-openbsd python3 bash
        fi
      when: inventory_hostname not in ['eng-gui', 'sales-gui']
      ignore_errors: yes

    - name: Install required packages on Ubuntu hosts (GUI nodes)
      raw: |
        if command -v apt >/dev/null 2>&1; then
          apt-get update && apt-get install -y curl wget iperf3 netcat python3 bash iputils-ping
        fi
      when: inventory_hostname in ['eng-gui', 'sales-gui']
      ignore_errors: yes

- name: HTTP Traffic Generation
  hosts: client_devices
  gather_facts: no
  tasks:
    - name: Generate HTTP traffic to web servers
      shell: |
        echo "=== Generating HTTP traffic from {{ inventory_hostname }} ==="
        # Traffic to internal web server
        for i in {1..5}; do
          curl -s http://192.168.30.10/ > /dev/null && echo "HTTP request $i to web-server successful" || echo "HTTP request $i to web-server failed"
          sleep 2
        done
        
        # Traffic to public web server
        for i in {1..5}; do
          curl -s http://192.168.100.10/ > /dev/null && echo "HTTP request $i to public-web successful" || echo "HTTP request $i to public-web failed"
          sleep 2
        done
      ignore_errors: yes
      async: 60
      poll: 0

- name: ICMP Traffic Generation (Ping Tests)
  hosts: all
  gather_facts: no
  tasks:
    - name: Ping connectivity tests
      shell: |
        echo "=== ICMP connectivity tests from {{ inventory_hostname }} ==="
        
        # Ping web servers
        ping -c 3 192.168.30.10 && echo "Ping to web-server successful" || echo "Ping to web-server failed"
        ping -c 3 192.168.30.11 && echo "Ping to db-server successful" || echo "Ping to db-server failed"
        ping -c 3 192.168.100.10 && echo "Ping to public-web successful" || echo "Ping to public-web failed"
        
        # Cross-department connectivity
        if [[ "{{ inventory_hostname }}" == *"eng"* ]]; then
          ping -c 3 192.168.20.10 && echo "Ping to sales-gui successful" || echo "Ping to sales-gui failed"
        elif [[ "{{ inventory_hostname }}" == *"sales"* ]]; then
          ping -c 3 192.168.10.10 && echo "Ping to eng-gui successful" || echo "Ping to eng-gui failed"
        fi
      ignore_errors: yes
      async: 30
      poll: 0

- name: TCP Traffic Generation with Netcat
  hosts: servers
  gather_facts: no
  tasks:
    - name: Start netcat listeners on servers
      shell: |
        echo "=== Starting TCP listeners on {{ inventory_hostname }} ==="
        # Start listeners on various ports
        nohup nc -l -p 8080 > /tmp/nc_8080.log 2>&1 &
        nohup nc -l -p 9090 > /tmp/nc_9090.log 2>&1 &
        echo "TCP listeners started on ports 8080, 9090"
      ignore_errors: yes
      async: 5
      poll: 0

- name: Generate TCP connections from clients
  hosts: client_devices
  gather_facts: no
  tasks:
    - name: Generate TCP traffic to servers
      shell: |
        echo "=== Generating TCP traffic from {{ inventory_hostname }} ==="
        # Send data to web server
        echo "Hello from {{ inventory_hostname }} - $(date)" | nc 192.168.30.10 8080 || echo "TCP connection to web-server:8080 failed"
        sleep 2
        
        # Send data to db server  
        echo "Database query from {{ inventory_hostname }} - $(date)" | nc 192.168.30.11 9090 || echo "TCP connection to db-server:9090 failed"
        sleep 2
        
        # Send data to file server
        echo "File request from {{ inventory_hostname }} - $(date)" | nc 192.168.30.12 8080 || echo "TCP connection to file-server:8080 failed"
      ignore_errors: yes
      async: 20
      poll: 0

- name: UDP Traffic Generation
  hosts: client_devices
  gather_facts: no
  tasks:
    - name: Generate UDP traffic
      shell: |
        echo "=== Generating UDP traffic from {{ inventory_hostname }} ==="
        # Send UDP packets to servers
        for i in {1..10}; do
          echo "UDP packet $i from {{ inventory_hostname }}" | nc -u 192.168.30.10 5353 || true
          echo "UDP packet $i from {{ inventory_hostname }}" | nc -u 192.168.30.11 5353 || true
          sleep 1
        done
        echo "UDP traffic generation completed"
      ignore_errors: yes
      async: 30
      poll: 0

- name: Bandwidth Testing with wget
  hosts: client_devices
  gather_facts: no
  tasks:
    - name: Download test files to generate bandwidth usage
      shell: |
        echo "=== Bandwidth testing from {{ inventory_hostname }} ==="
        # Create test content on nginx servers if accessible
        for server in 192.168.30.10 192.168.100.10; do
          echo "Testing bandwidth to $server"
          # Multiple concurrent downloads to simulate load
          for i in {1..3}; do
            wget -q -O /dev/null --timeout=10 http://$server/ &
          done
          wait
          echo "Bandwidth test to $server completed"
        done
      ignore_errors: yes
      async: 45
      poll: 0

- name: Cross-Department Traffic Simulation
  hosts: client_devices
  gather_facts: no
  tasks:
    - name: Simulate inter-department communication
      shell: |
        echo "=== Cross-department traffic simulation from {{ inventory_hostname }} ==="
        
        # Engineering to Sales communication
        if [[ "{{ inventory_hostname }}" == *"eng"* ]]; then
          echo "Engineering accessing sales resources..."
          ping -c 5 192.168.20.10 || echo "Cannot reach sales-gui"
          ping -c 5 192.168.20.11 || echo "Cannot reach sales-mobile"
          
        # Sales to Engineering communication  
        elif [[ "{{ inventory_hostname }}" == *"sales"* ]]; then
          echo "Sales accessing engineering resources..."
          ping -c 5 192.168.10.10 || echo "Cannot reach eng-gui"
          ping -c 5 192.168.10.11 || echo "Cannot reach eng-dev"
        fi
        
        # Both departments accessing servers
        echo "Accessing shared server resources..."
        curl -s http://192.168.30.10/ > /dev/null && echo "Web server access successful"
        ping -c 3 192.168.30.11 && echo "Database server reachable"
        ping -c 3 192.168.30.12 && echo "File server reachable"
      ignore_errors: yes
      async: 30
      poll: 0

- name: Traffic Summary and Cleanup
  hosts: all
  gather_facts: no
  tasks:
    - name: Display traffic generation summary
      debug:
        msg: |
          Traffic generation completed for {{ inventory_hostname }}
          - HTTP traffic to web servers
          - ICMP connectivity tests
          - TCP connections via netcat
          - UDP packet transmission
          - Bandwidth testing
          - Cross-department communication tests
          
    - name: Cleanup background processes
      shell: |
        pkill -f "nc -l" || true
        echo "Cleanup completed on {{ inventory_hostname }}"
      ignore_errors: yes

- name: Generate Continuous Traffic (Optional Background Task)
  hosts: client_devices
  gather_facts: no
  tasks:
    - name: Start continuous traffic generation
      shell: |
        echo "=== Starting continuous traffic generation from {{ inventory_hostname }} ==="
        
        # Create a script for continuous traffic
        cat > /tmp/continuous_traffic.sh << 'SCRIPT'
        #!/bin/bash
        while true; do
          # HTTP requests every 30 seconds
          curl -s http://192.168.30.10/ > /dev/null
          curl -s http://192.168.100.10/ > /dev/null
          
          # Ping tests every 60 seconds
          ping -c 1 192.168.30.11 > /dev/null
          ping -c 1 192.168.30.12 > /dev/null
          
          sleep 30
        done
        SCRIPT
        
        chmod +x /tmp/continuous_traffic.sh
        nohup /tmp/continuous_traffic.sh > /tmp/continuous_traffic.log 2>&1 &
        echo "Continuous traffic script started in background"
      ignore_errors: yes
      when: false  # Set to true if you want continuous traffic
